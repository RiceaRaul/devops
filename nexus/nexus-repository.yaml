# 1. Create a dedicated namespace for Nexus
apiVersion: v1
kind: Namespace
metadata:
  name: nexus-repository
---
# 2. Deploy Nexus Repository OSS with an init container to fix permissions
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonatype-registry
  namespace: nexus-repository
  labels:
    app: sonatype-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonatype-registry
  template:
    metadata:
      labels:
        app: sonatype-registry
    spec:
      # Set the user and group for the main container (ensuring Nexus can write to its data directory)
      securityContext:
        runAsUser: 200
        fsGroup: 200
      # Init container to prepare the Nexus data directory with proper permissions
      initContainers:
      - name: fix-permissions
        image: busybox
        securityContext:
          runAsUser: 0  # Run as root to modify permissions
        command:
          - sh
          - -c
          - |
            mkdir -p /nexus-data/log /nexus-data/tmp /nexus-data/instances
            chown -R 200:200 /nexus-data
        volumeMounts:
        - name: registry-vol
          mountPath: /nexus-data
      # Main Nexus container
      containers:
      - name: nexus
        image: sonatype/nexus3:latest
        imagePullPolicy: IfNotPresent
        env:
          - name: NEXUS_DATA
            value: /nexus-data
        ports:
          - containerPort: 8081
            name: ui
          - containerPort: 5000
            name: docker
        workingDir: /nexus-data
        volumeMounts:
          # Use the ephemeral volume for Nexus data storage
          - name: registry-vol
            mountPath: /nexus-data
      volumes:
      - name: registry-vol
        emptyDir: {}  # Ephemeral volume; data will not persist beyond the pod lifecycle
---
# 3. Create a Service exposing both the UI and Docker repository ports
apiVersion: v1
kind: Service
metadata:
  name: sonatype-service
  namespace: nexus-repository
spec:
  selector:
    app: sonatype-registry
  ports:
    - name: ui
      port: 80         # Externally used for the Nexus dashboard (maps to container port 8081)
      targetPort: 8081
    - name: docker
      port: 5000       # Externally used for the Docker repository (maps to container port 5000)
      targetPort: 5000
  type: ClusterIP
---
# 4. Issue a TLS certificate for nexus.ricearaul.com (using cert-manager with your Cloudflare issuer)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nexus-certificate
  namespace: nexus-repository
spec:
  secretName: nexus-certificate-secret
  issuerRef:
    name: cloudflare-clusterissuer
    kind: ClusterIssuer
  dnsNames:
    - nexus.ricearaul.com
---
# 5. IngressRoute for the Nexus dashboard via Traefik’s websecure entrypoint (port 443)
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: nexus-ui-ingressroute
  namespace: nexus-repository
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`nexus.ricearaul.com`)
      priority: 10
      services:
        - name: sonatype-service
          port: 80
  tls:
    secretName: nexus-certificate-secret
---
# 6. IngressRoute for the Nexus Docker repository via Traefik’s docker entrypoint (port 5000)
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: nexus-docker-ingressroute
  namespace: nexus-repository
spec:
  entryPoints:
    - docker
  routes:
    - kind: Rule
      match: Host(`nexus.ricearaul.com`)
      priority: 10
      services:
        - name: sonatype-service
          port: 5000
  tls:
    secretName: nexus-certificate-secret

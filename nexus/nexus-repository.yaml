---
# 1. Create a dedicated namespace for Nexus
apiVersion: v1
kind: Namespace
metadata:
  name: nexus-repository
---
# 2. Define a PersistentVolume (cluster‑scoped) using local-path storage
apiVersion: v1
kind: PersistentVolume
metadata:
  name: sonatypestorage
  labels:
    name: sonatypestorage
spec:
  storageClassName: local-path  # k3s default storage class
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/nexus-repository"  # Ensure this directory exists on your node
---
# 3. Create a PersistentVolumeClaim bound to the above PV
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sonatype-registry-data
  namespace: nexus-repository
spec:
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# 4. Create a ConfigMap containing a custom nexus.properties file to set the Docker HTTPS port
apiVersion: v1
kind: ConfigMap
metadata:
  name: nexus-custom-config
  namespace: nexus-repository
data:
  nexus.properties: |
    # Enable the Docker repository connector on port 5000
    nexus.docker.https.port=5000
---
# 5. Deploy Nexus Repository OSS with both UI and Docker ports enabled
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonatype-registry
  namespace: nexus-repository
  labels:
    app: sonatype-registry
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonatype-registry
  template:
    metadata:
      labels:
        app: sonatype-registry
    spec:
      # Run the container as UID 200 and adjust group permissions
      securityContext:
        runAsUser: 200
        fsGroup: 200
      volumes:
        - name: registry-vol
          persistentVolumeClaim:
            claimName: sonatype-registry-data
        - name: nexus-config
          configMap:
            name: nexus-custom-config
            items:
              - key: nexus.properties
                path: nexus.properties
      containers:
        - name: nexus
          image: sonatype/nexus3:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
              name: ui
            - containerPort: 5000
              name: docker
          volumeMounts:
            # Mount the persistent storage to /nexus-data so Nexus can create its directories
            - name: registry-vol
              mountPath: /nexus-data
            # Mount the custom nexus.properties to override the Docker port configuration
            - name: nexus-config
              mountPath: /nexus-data/etc/nexus.properties
              subPath: nexus.properties
---
# 6. Create a Service that exposes both the UI and Docker repository ports
apiVersion: v1
kind: Service
metadata:
  name: sonatype-service
  namespace: nexus-repository
spec:
  selector:
    app: sonatype-registry
  ports:
    - name: ui
      port: 80         # Exposed port for the UI (will be mapped to container port 8081)
      targetPort: 8081
    - name: docker
      port: 5000       # Exposed port for the Docker repository (will be mapped to container port 5000)
      targetPort: 5000
  type: ClusterIP
---
# 7. Issue a TLS certificate for nexus.ricearaul.com using cert-manager (with your Cloudflare-based ClusterIssuer)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nexus-certificate
  namespace: nexus-repository
spec:
  secretName: nexus-certificate-secret
  issuerRef:
    name: cloudflare-clusterissuer
    kind: ClusterIssuer
  dnsNames:
    - nexus.ricearaul.com
---
# 8. Expose the Nexus dashboard via Traefik’s websecure entrypoint
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: nexus-ui-ingressroute
  namespace: nexus-repository
spec:
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: Host(`nexus.ricearaul.com`)
      priority: 10
      services:
        - name: sonatype-service
          port: 80
  tls:
    secretName: nexus-certificate-secret
---
# 9. Expose the Nexus Docker repository via Traefik’s docker entrypoint (on port 5000)
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: nexus-docker-ingressroute
  namespace: nexus-repository
spec:
  entryPoints:
    - docker
  routes:
    - kind: Rule
      match: Host(`nexus.ricearaul.com`)
      priority: 10
      services:
        - name: sonatype-service
          port: 5000
  tls:
    secretName: nexus-certificate-secret
